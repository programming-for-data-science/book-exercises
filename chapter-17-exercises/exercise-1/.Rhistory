#origin y dest
#¿average speed? ¿distance / air_time ?
city <- flights %>%
group_by(dest) %>%
summarize(h_speed = mean((distance/air_time), na.rm = TRUE))
city
# Which city was flown to with the highest average speed?
#origin y dest
#¿average speed? ¿distance / air_time ?
city <- flights %>%
group_by(dest) %>%
summarize(h_speed = mean((distance/air_time), na.rm = TRUE)) %>%
head(1)
city
# Which city was flown to with the highest average speed?
#origin y dest
#¿average speed? ¿distance / air_time ?
city <- flights %>%
group_by(origin) %>%
summarize(h_speed = mean((distance/air_time), na.rm = TRUE)) %>%
head(1)
city
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
#group by month y luego avg columa dep_delay
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
dep_delay_by_month
# Which month had the greatest average departure delay?
max_avg <- dep_delay_by_month %>%
filter(avg_delay == max(avg_delay)) %>%
select(month)
max_avg
# Which month had the greatest average departure delay?
max_avg <- dep_delay_by_month %>%
filter(avg_delay == max(avg_delay))
#            select(month)
max_avg
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
h_dest_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
head(1)
h_dest_delay
by_dest %>%
rename(faa = dest)%>%
left_join(airports, by=c("dest" = "faa"))
by_dest %>%
rename(faa = dest)%>%
left_join(airports, by="faa")
by_dest %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
rename(faa = dest)%>%
left_join(airports, by="faa")
by_dest <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
rename(faa = dest)%>%
left_join(airports, by="faa")
by_dest
# Which city was flown to with the highest average speed?
#origin y dest
#¿average speed? ¿distance / air_time ?
city <- flights %>%
mutate(speed = (distance/air_time)) %>%speed
group_by(dest) %>%
summarize(h_speed = mean(speed, na.rm = TRUE)) %>%
left_join(airports, by="faa")
# Which city was flown to with the highest average speed?
#origin y dest
#¿average speed? ¿distance / air_time ?
city <- flights %>%
mutate(speed = (distance/air_time)) %>%
group_by(dest) %>%
summarize(h_speed = mean(speed, na.rm = TRUE)) %>%
left_join(airports, by="faa")
by_dest <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
rename(faa = dest)%>%
left_join(airports, by="faa")
by_dest
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
h_dest_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
head(1)
h_dest_delay
by_dest <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
rename(faa = dest)%>%
left_join(airports, by="faa")
by_dest
city
# You can look up these airports in the `airports` data frame!
View(airports)
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
#group by month y luego avg columa dep_delay
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
# Which month had the greatest average departure delay?
max_avg <- dep_delay_by_month %>%
filter(avg_delay == max(avg_delay))
#            select(month)
max_avg
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
h_dest_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
head(1)
h_dest_delay
by_dest <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
rename(faa = dest)%>%
left_join(airports, by="faa")
by_dest
city <- flights %>%
mutate(speed = (distance/air_time)) %>%
group_by(dest) %>%
summarize(h_speed = mean(speed, na.rm = TRUE)) %>%
left_join(airports, by="faa")
by_dest <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
rename(faa = dest)%>%
left_join(airports, by="faa")
by_dest
library(midwest)
library("midwest")
# Change the color of each point based on the state it is in
ggplot(data = midwest) +
geom_point(
mapping = aes(x = percollege, y = percadultpoverty, color = state)
) +
scale_color_brewer(palette = "Set3") # use the "Set3" color palette
install.library(midwest)
install.packages(midwest)
install.packages("midwest")
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
install.packages("ggmap")
library("ggmap")
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
?diamonds
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
nrows(diamonds)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
nrows("diamonds")
diamonds
nrow(diamonds)
ncol(diamonds)
colnames(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(1000)
library(dplyr)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(tbl = diamonds, size=1000)
nrow(diamonds_sample)
View(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
scatter(x = "carat", y = "price" )
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(x = "carat", y = "price")
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = "carat", y = "price"))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = "carat", y = "price", colour = "clarity"))
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y =price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, colour = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, colour = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, colour = )) +
scale_color_brewer(palette = "Set3")
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
scale_color_brewer(palette = "Set3")
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
scale_color_brewer(palette = "Set1")
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, colour = clarity)) +
scale_color_brewer(palette = "Set1")
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, colour = clarity)) +
scale_color_brewer(palette = "Set3")
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, colour = clarity)) +
scale_color_brewer(palette = "Blue")
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, colour = clarity)) +
scale_color_brewer(palette = "PuBu")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape=4))
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut ))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, shape = price ))
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut ))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price ))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, colour = price ))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, colour = price )) +
scale_color_brewer(palette = "3")
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, colour = price )) +
scale_color_brewer(palette = "3-class")
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, colour = price )) +
scale_color_brewer(palette = "Set1")
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price)) +
scale_color_brewer(palette = "Set1")
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price)) +
scale_color_brewer(palette = "Set3")
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price)) +
scale_color_brewer(palette = "PuBu")
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y =price), color = "blue")
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, colour = clarity))
cd /home/alejandro/Descargas
%cd% "/home/alejandro/Descargas"
cd "/home/alejandro/Descargas"
df <- data.frame("/home/alejandro/Descargas/madrid_2001.csv.zip")
ncols(df)
ncol(df)
df <- data.frame("/home/alejandro/Descargas/madrid_2001.csv")
ncol(df)
ncol(df)
ncols(df)
colnames(df)
df <- data.frame("/home/alejandro/Descargas/madrid_2001.csv")
colnames(df)
df[1]
df <- read.csv("/home/alejandro/Descargas/madrid_2001.csv")
colnames(df)
nrow(df)
ncol(df)
nrow(df)
ncol(df), nrow(df)
ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2001.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2002.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2003.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2004.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2005.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2006.csv"); ncol(df); nrow(df)
f <-
df <- read.csv("/home/alejandro/Descargas/madrid_2007.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2008.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2009.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2010.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2011.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2012.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2013.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2014.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2015.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2016.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2017.csv"); ncol(df); nrow(df)
df <- read.csv("/home/alejandro/Descargas/madrid_2018.csv"); ncol(df); nrow(df)
# Load necessary packages (`dplyr`, `ggplot2`, and `plotly`)
library(dplyr)
library(ggplot2)
library(plotly)
library(plotly)
# Exercise 1: Creating a grouped bar chart of cancer rates in King County, WA
# (using plotly)
library(dplyr)
library(ggplot2)
library(plotly)
# Load the `"data/IHME_WASHINGTON_MORTALITY_RATES_1980_2014.csv` file
# into a variable `mortality_rates`
# Make sure strings are *not* read in as factors
mortality_rates <- read.csv("data/IHME_WASHINGTON_MORTALITY_RATES_1980_2014.csv")
setwd("~/Dropbox/Data/UPM/1.DP/book-exercises/chapter-17-exercises/exercise-1")
# Load the `"data/IHME_WASHINGTON_MORTALITY_RATES_1980_2014.csv` file
# into a variable `mortality_rates`
# Make sure strings are *not* read in as factors
mortality_rates <- read.csv("data/IHME_WASHINGTON_MORTALITY_RATES_1980_2014.csv")
# This is actually a very large and rich dataset, but we will only focus on
# a small subset of it. Create a new data frame `plot_data` by filtering the
# `mortality_rates` data to the following:
# - The `location_name` is "King County"
# - The `sex` is *not* "Both"
# - The `cause_name` is "Neoplasms"
# - The `year_id` is greater than 2004
# - Only keep the columns `sex`, `year_id`, and `mortality_rate`
plot_data <- mortality_rates %>%
filter(location_name == "King County")
# This is actually a very large and rich dataset, but we will only focus on
# a small subset of it. Create a new data frame `plot_data` by filtering the
# `mortality_rates` data to the following:
# - The `location_name` is "King County"
# - The `sex` is *not* "Both"
# - The `cause_name` is "Neoplasms"
# - The `year_id` is greater than 2004
# - Only keep the columns `sex`, `year_id`, and `mortality_rate`
plot_data <- mortality_rates %>%
filter(location_name == "King County") %>%
filter(sex != "Both")
# This is actually a very large and rich dataset, but we will only focus on
# a small subset of it. Create a new data frame `plot_data` by filtering the
# `mortality_rates` data to the following:
# - The `location_name` is "King County"
# - The `sex` is *not* "Both"
# - The `cause_name` is "Neoplasms"
# - The `year_id` is greater than 2004
# - Only keep the columns `sex`, `year_id`, and `mortality_rate`
plot_data <- mortality_rates %>%
filter(location_name == "King County") %>%
filter(sex != "Both") %>%
filter(cause_name == "Neoplasms") %>%
filter(year_id > 2004) %>%
select(sex, year_id, mortality_rate)
colnames(plot_data)
head(plot_data)
# Using ggplot2 (recall chapter 16), make a grouped ("dodge") bar chart of
# mortality rates each year, with different bars for each sex.
# Store this plot in a variable `mort_plot`
mort_plot <- ggplot(data = "plot_data") +
geom_bar(mapping = aes(x = year, y = sex ))
# Using ggplot2 (recall chapter 16), make a grouped ("dodge") bar chart of
# mortality rates each year, with different bars for each sex.
# Store this plot in a variable `mort_plot`
mort_plot <- ggplot(data = plot_data) +
geom_bar(mapping = aes(x = year, y = sex ))
# To make this plot interactive, pass `mort_plot` to the `ggplotly()` function
# (which is part of the `plotly` package). This will make your plot interactive!
ggplotly(mort_plot)
# Using ggplot2 (recall chapter 16), make a grouped ("dodge") bar chart of
# mortality rates each year, with different bars for each sex.
# Store this plot in a variable `mort_plot`
mort_plot <- ggplot(data = plot_data) +
geom_bar(mapping = aes(x = year_id, y = sex ))
# To make this plot interactive, pass `mort_plot` to the `ggplotly()` function
# (which is part of the `plotly` package). This will make your plot interactive!
ggplotly(mort_plot)
# Using ggplot2 (recall chapter 16), make a grouped ("dodge") bar chart of
# mortality rates each year, with different bars for each sex.
# Store this plot in a variable `mort_plot`
mort_plot <- ggplot(data = plot_data) +
geom_bar(mapping = aes(x = year_id, y = sex ))
# To make this plot interactive, pass `mort_plot` to the `ggplotly()` function
# (which is part of the `plotly` package). This will make your plot interactive!
ggplotly(mort_plot)
head(plot_data)
tail(plot_data)
# Using ggplot2 (recall chapter 16), make a grouped ("dodge") bar chart of
# mortality rates each year, with different bars for each sex.
# Store this plot in a variable `mort_plot`
mort_plot <- ggplot(data = plot_data) +
geom_bar(mapping = aes(x = year_id, y = mortality_rate ))
# To make this plot interactive, pass `mort_plot` to the `ggplotly()` function
# (which is part of the `plotly` package). This will make your plot interactive!
ggplotly(mort_plot)
# Using the `plot_ly()` function from the `plotly` package, pass in `plot_data`
# as the data, and specify `year_id` as the x variable, mortality_rate as
# the y variable, and `sex` as the color variable.
# (make sure to specify these as *formulas*)
# Also set the plot type to "bar". Store the result in a variable.
plot_ly(data=plot_data)
